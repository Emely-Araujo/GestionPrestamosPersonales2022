@page "/persona"
@page "/personas/{PersonasId:int}"

@inject PersonasBLL PersonasBLL
@inject NotificationService notificationService



<EditForm Model="persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PersonaId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="persona.PersonaId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="btn btn-primary input-group-text"
                                    @onclick="Buscar">Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            @*Nombre*@
            <div class="form-group">
                <label>Nombres</label>
                <InputText @bind-Value="persona.Nombre" class="form-control" />
                <ValidationMessage For="@(() => persona.Nombre)" />
            </div>

            @*Telefono*@
            <div class="form-group">
                <label>Telefono</label>
                <InputText @bind-Value="persona.Telefono" class="form-control" />
                <ValidationMessage For="@(() => persona.Telefono)" />
            </div>
            @*Celular*@
            <div class="form-group">
                <label>Celular</label>
                <InputText @bind-Value="persona.Celular" class="form-control" />
                <ValidationMessage For="@(() => persona.Celular)" />
            </div>
            @*Email*@
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="persona.Email" class="form-control" />
                <ValidationMessage For="@(() => persona.Email)" />
            </div>
            @*Direccion*@
            <div class="form-group">
                <label>Direccion</label>
                <InputText @bind-Value="persona.Direccion" class="form-control" />
                <ValidationMessage For="@(() => persona.Direccion)" />
            </div>
            @*Fecha de nacimiento*@
            <div class="form-group">
                <label>Fecha de nacimiento</label>
                <InputDate @bind-Value="persona.FechaNacimiento" class="form-control" />
                <ValidationMessage For="@(() => persona.FechaNacimiento)" />
            </div>
            <h1>
                <span class="text-danger">@mensaje</span>
            </h1>


        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PersonasId { get; set; }

    public Personas persona { get; set; } = new Personas();

    public String mensaje { get; set; } = "";

    public void Nuevo()
    {
        persona = new Personas();
    }
    bool Validar()
    {
        return persona.Nombre.Contains(".");
    }

    protected override void OnInitialized()
    {
        if (PersonasId > 0)
        {

            this.persona.PersonaId = PersonasId;
            this.Buscar();
        }
    }

    public void Guardar()
    {
        bool guardo;

        if (!Validar())
        {
            mensaje = "Hay errores, por favor corregir.";
            return;
        }

        guardo = PersonasBLL.Guardar(persona);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();

        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se guardo correctamente."
            });

        }


    }
    private void Buscar()
    {
        if (persona.PersonaId > 0)
        {
            var encontrado = PersonasBLL.Buscar(persona.PersonaId);

            if (encontrado != null)
                this.persona = encontrado;
            else
            {
                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "No Encontrado..."
                });
            }

        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = PersonasBLL.Eliminar(persona);

        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente."
            });
        }
    }
    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
}
